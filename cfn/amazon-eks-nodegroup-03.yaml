---
AWSTemplateFormatVersion: 2010-09-09
Description: Amazon EKS - NameSpace Node Group for service - SpotFleet and OnDemand instances mix - Released 2020-12-12. Required 1st Node Group Security Group for intercommunication configuration.

Metadata:

  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: EKS Cluster
        Parameters:
          - EnvironmentName
          - EksName
          - NameSpace
      - Label:
          default: Worker Node Configuration
        Parameters:
          - NodeGroupName
          - NodeGroupPolicyArn
          - NodeAutoScalingGroupMinSize
          - NodeAutoScalingGroupDesiredSize
          - NodeAutoScalingGroupMaxSize
          - NodeInstanceType
          - NodeImageId
          - NodeVolumeSize
          - KeyName
          - BootstrapArgumentsOpts
          - AutoScalingGroupMonitoringDetailed
          - BootstrapArgumentsForOnDemand
          - BootstrapArgumentsForSpotFleet
          - OnDemandBaseCapacity
          - OnDemandPercentageAboveBaseCapacity
          - SpotInstancePools
          - InstanceTypesOverride
      - Label:
          default: Worker Network Configuration
        Parameters:
          - Subnet2octet


Parameters:

  KeyName:
    Description: The EC2 Key Pair to allow SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName

  Subnet2octet:
    Type: Number
    Default: 96
    Description: VPC IP range block second octet.

  NodeImageId:
    Description: Find the latest AMI id here - https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
    Type: AWS::EC2::Image::Id

  NodeInstanceType:
    Description: EC2 instance type for the node instances
    Type: String
    Default: t3a.xlarge
    ConstraintDescription: Must be a valid EC2 instance type
    AllowedValues:
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - t3a.nano
      - t3a.micro
      - t3a.small
      - t3a.medium
      - t3a.large
      - t3a.xlarge
      - t3a.2xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - p2.xlarge
      - p2.8xlarge
      - p2.16xlarge
      - p3.2xlarge
      - p3.8xlarge
      - p3.16xlarge
      - p3dn.24xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.12xlarge
      - r5.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.12xlarge
      - r5d.24xlarge
      - z1d.large
      - z1d.xlarge
      - z1d.2xlarge
      - z1d.3xlarge
      - z1d.6xlarge
      - z1d.12xlarge

  NodeAutoScalingGroupMinSize:
    Description: Minimum size of Node Group ASG.
    Type: Number
    Default: 1

  NodeAutoScalingGroupDesiredSize:
    Description: Desired capacity of Node Group ASG.
    Type: Number
    Default: 1

  NodeAutoScalingGroupMaxSize:
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than NodeAutoScalingGroupDesiredSize.
    Type: Number
    Default: 5

  NodeVolumeSize:
    Description: Node volume size
    Type: Number
    Default: 20

  OnDemandBaseCapacity:
    Type: Number
    Description: "on-demand base capacity"
    Default: 0

  OnDemandPercentageAboveBaseCapacity:
    Type: Number
    Description: "on-demand percentage above base capacity(0-100)"
    Default: 0

  SpotInstancePools:
    Type: Number
    Description: "spot instance pools(1-20)"
    Default: 2

  InstanceTypesOverride:
    Type: String
    Description: "multiple spot instances to override (separated by comma)"
    Default: "t3a.xlarge,t3.xlarge,m5a.xlarge,c5.xlarge,c5d.xlarge,c4.xlarge,c3.xlarge,r5a.xlarge,t3a.2xlarge"

  EksName:
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.
    Type: String

  BootstrapArgumentsOpts:
    Description: Optional arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Type: String
    Default: ""

  BootstrapArgumentsForOnDemand:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: "--kubelet-extra-args --node-labels=lifecycle=OnDemand"
    Type: String

  BootstrapArgumentsForSpotFleet:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Default: "--kubelet-extra-args '--node-labels=lifecycle=Ec2Spot --register-with-taints=spotInstance=true:PreferNoSchedule'"
    Type: String

  NodeGroupName:
    Description: Unique identifier for the Node Group.
    Type: String

  NodeGroupPolicyArn:
    Description: Arn of the Node Group Policy.
    Type: String

  EnvironmentName:
    Type: String
    Description: Environment (dev, test16, qa56, stg97).
    AllowedPattern: '^[a-z][-a-z0-9]*$'
    ConstraintDescription: must begin with a letter and contain only lower case alphanumeric - characters.

  NameSpace:
    Type: String
    # Default: '' # does not match AllowedPattern
    Description: NameSpace (nspace10, nspace20, nspace21, nspace60).
    AllowedPattern: '^[a-z]+[0-9]+$'

  AutoScalingGroupMonitoringDetailed:
    Description: Indicates whether detailed instance monitoring is enabled for the Auto Scaling group. By default, this property is set to true (enabled). true = monitor every 1 minute. false = monitor every 5 minutes. (true or false).
    Type: String
    Default: false
    AllowedValues:
    - true
    - false

Resources:

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref NodeInstanceRole

  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${EksName}-nodes-${NodeGroupName}-role"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - Fn::ImportValue: !Sub "${EnvironmentName}-ClusterAutoscalerPolicy"
        - Fn::ImportValue: !Sub "${EnvironmentName}-AlbIngressPolicy"
        - !Ref NodeGroupPolicyArn

  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "Security group for ${EksName}-${NodeGroupName} nodes in the cluster"
      VpcId:
        Fn::ImportValue: !Sub "${EnvironmentName}-vpc-VpcId"
      Tags:
        - Key: !Sub kubernetes.io/cluster/${EksName}
          Value: owned
        - Key: Name
          Value: !Sub "${EksName}-${NodeGroupName}"
        - Key: EnvironmentName
          Value: !Ref EnvironmentName          
        - Key: NameSpace
          Value: !Ref NameSpace          
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Sub 10.${Subnet2octet}.0.0/16
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: !Sub 10.${Subnet2octet}.0.0/16
        - IpProtocol: icmp
          FromPort: '8'
          ToPort: '-1'
          CidrIp: !Sub 10.${Subnet2octet}.0.0/16
          Description: Allow ping from VPC
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: !Sub 10.${Subnet2octet}.67.201/32
          Description: build access
        - IpProtocol: tcp
          FromPort: '1025'
          ToPort: '65535'
          CidrIp: !Sub 10.${Subnet2octet}.0.0/16
          Description: All VPC access
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: !Sub 10.${Subnet2octet}.0.0/16
          Description: All VPC access to HTTPS

  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-ControlPlaneSecurityGroup"
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-ControlPlaneSecurityGroup"
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535

  NodeSecurityGroupFromNodemainSecurityGroupId:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node groups to communicate each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId:
        Fn::ImportValue: !Sub "${EnvironmentName}-NodeGroup-main-NodeSecurityGroupId"
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535

  NodemainSecurityGroupIdFromNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow node groups to communicate each other
      GroupId:
        Fn::ImportValue: !Sub "${EnvironmentName}-NodeGroup-main-NodeSecurityGroupId"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535

  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-ControlPlaneSecurityGroup"
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-ControlPlaneSecurityGroup"
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  ClusterControlPlaneSecurityGroupIngress443:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NodeSecurityGroup
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-ControlPlaneSecurityGroup"
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443

  NodemainSecurityGroupIdIngressPing:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue: !Sub "${EnvironmentName}-NodeGroup-main-NodeSecurityGroupId"
      IpProtocol: icmp
      FromPort: '8'
      ToPort: '-1'
      CidrIp: !Sub 10.${Subnet2octet}.0.0/16
      Description: Allow ping pods from VPC

  NodemainSecurityGroupIdIngressFromVPC:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue: !Sub "${EnvironmentName}-NodeGroup-main-NodeSecurityGroupId"
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
      CidrIp: !Sub 10.${Subnet2octet}.0.0/16
      Description: Allow access pods from VPC

  NodemainSecurityGroupIdIngress80vpc:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId:
        Fn::ImportValue: !Sub "${EnvironmentName}-NodeGroup-main-NodeSecurityGroupId"
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: !Sub 10.${Subnet2octet}.0.0/16
      Description: HTTP access from VPC

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref NodeAutoScalingGroupDesiredSize
      MixedInstancesPolicy:
        InstancesDistribution:
          OnDemandAllocationStrategy: prioritized
          OnDemandBaseCapacity: !Ref OnDemandBaseCapacity
          OnDemandPercentageAboveBaseCapacity: !Ref OnDemandPercentageAboveBaseCapacity
          SpotAllocationStrategy: lowest-price
          SpotInstancePools: !Ref SpotInstancePools
          # SpotMaxPrice: String
        LaunchTemplate:
          LaunchTemplateSpecification:
            LaunchTemplateId: !Ref MyLaunchTemplate
            # LaunchTemplateName: String
            Version: !GetAtt MyLaunchTemplate.LatestVersionNumber
          Overrides:
            - InstanceType: !Select [0, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [1, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [2, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [3, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [4, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [5, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [6, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [7, !Split [ ",", !Ref InstanceTypesOverride ] ]
            - InstanceType: !Select [8, !Split [ ",", !Ref InstanceTypesOverride ] ]

      MinSize: !Ref NodeAutoScalingGroupMinSize
      MaxSize: !Ref NodeAutoScalingGroupMaxSize
      VPCZoneIdentifier: !Split
          - ","
          - Fn::ImportValue: !Sub "${EnvironmentName}-vpc-PrivateSubnetIds"
      TerminationPolicies:
        - OldestLaunchConfiguration
        - OldestLaunchTemplate
        - NewestInstance
      MetricsCollection: 
        - 
          Granularity: "1Minute"
          Metrics: 
            - GroupDesiredCapacity
            - GroupInServiceInstances
            - GroupMaxSize
            - GroupMinSize
            - GroupPendingInstances
            - GroupStandbyInstances
            - GroupTerminatingInstances
            - GroupTotalInstances
      Tags:
        - Key: Name
          Value: !Sub "${EksName}-${NodeGroupName}-node"
          PropagateAtLaunch: true
          #TODO add random number at the end
        - Key: !Sub kubernetes.io/cluster/${EksName}
          Value: owned
          PropagateAtLaunch: true
        - Key: EnvironmentName
          Value: !Ref EnvironmentName
          PropagateAtLaunch: true
        - Key: !Sub k8s.io/cluster-autoscaler/${EksName}
          Value: owned
          PropagateAtLaunch: true
        - Key: k8s.io/cluster-autoscaler/enabled
          Value: true
          PropagateAtLaunch: true
        - Key: NameSpace
          Value: !Ref NameSpace                 
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref NodeAutoScalingGroupDesiredSize
        PauseTime: PT5M

  LCH:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: !Ref NodeGroup
      HeartbeatTimeout: 60
      DefaultResult: CONTINUE
      LifecycleHookName: !Sub "${NodeGroupName}-LCH"
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING

#
# Launch Template
#
  MyLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub "${AWS::StackName}-LaunchTemplate"
      LaunchTemplateData:
        TagSpecifications:
          -
            ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub "${EksName}-${NodeGroupName}-Node"
              - Key: KubernetesCluster
                Value: !Ref EksName
              - Key: !Sub 'kubernetes.io/cluster/${EksName}'
                Value: 'owned'
              - Key: EnvironmentName
                Value: !Ref EnvironmentName
              - Key: !Sub k8s.io/cluster-autoscaler/${EksName}
                Value: owned
              - Key: k8s.io/cluster-autoscaler/enabled
                Value: true
              - Key: NameSpace
                Value: !Ref NameSpace                 
        UserData:
          Fn::Base64:
            !Sub |
            #!/bin/bash
            set -o xtrace
            iid=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            export AWS_DEFAULT_REGION=${AWS::Region}
            ilc=`aws ec2 describe-instances --instance-ids  $iid  --query 'Reservations[0].Instances[0].InstanceLifecycle' --output text`
            if [ "$ilc" == "spot" ]; then
              /etc/eks/bootstrap.sh ${EksName} ${BootstrapArgumentsForSpotFleet} ${BootstrapArgumentsOpts}
            else
              /etc/eks/bootstrap.sh ${EksName} ${BootstrapArgumentsForOnDemand} ${BootstrapArgumentsOpts}
            fi
            # /etc/eks/bootstrap.sh ${EksName} $BootstrapArgumentsForOnDemand
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup  \
                     --region ${AWS::Region}
        IamInstanceProfile:
          Arn: {"Fn::GetAtt" : ["NodeInstanceProfile", "Arn"] }
        KeyName: !Ref KeyName
        NetworkInterfaces:
          -
            DeviceIndex: 0
            AssociatePublicIpAddress: false
            Groups:
              - !Ref NodeSecurityGroup
        ImageId: !Ref NodeImageId
        InstanceType: !Ref NodeInstanceType
        Monitoring: 
          Enabled: !Ref AutoScalingGroupMonitoringDetailed

  NodeInstanceProfileArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - Fn::ImportValue: !Sub "${EnvironmentName}-SsmBasePath"
          - '/infra/eks/nodes-group/'
          - !Ref NameSpace
          - '/instance-profile/arn'
      Type: String
      Value: {"Fn::GetAtt" : ["NodeInstanceProfile", "Arn"] }
      Description: !Sub "Node Group ${NameSpace} NodeInstanceProfileArn"
      Tags:
        EnvironmentName: !Ref EnvironmentName
        cloudformation:stack-name: !Ref AWS::StackName

  NodeInstanceRoleArnParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - Fn::ImportValue: !Sub "${EnvironmentName}-SsmBasePath"
          - '/infra/eks/nodes-group/'
          - !Ref NameSpace
          - '/instance-role/arn'
      Type: String
      Value: !GetAtt NodeInstanceRole.Arn
      Description: !Sub "Node Group ${NameSpace} NodeInstanceRoleArn"
      Tags:
        EnvironmentName: !Ref EnvironmentName
        cloudformation:stack-name: !Ref AWS::StackName

  NodeSecurityGroupIdParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Join
        - ''
        - - Fn::ImportValue: !Sub "${EnvironmentName}-SsmBasePath"
          - '/infra/eks/nodes-group/'
          - !Ref NameSpace
          - '/security-group/id'
      Type: String
      Value: !Ref NodeSecurityGroup
      Description: !Sub "Node Group ${NameSpace} NodeSecurityGroupId"
      Tags:
        EnvironmentName: !Ref EnvironmentName
        cloudformation:stack-name: !Ref AWS::StackName

Outputs:

  NodeGroupName:
    Description: AutoScalingGroup
    Value: !Ref NodeGroup
    Export:
      Name: !Sub "${EnvironmentName}-NodeGroup-${NameSpace}-Name"

  NodeInstanceProfileArn:
    Description: The node instance role
    Value: !GetAtt NodeInstanceProfile.Arn
    # Value: {"Fn::GetAtt" : ["NodeInstanceProfile", "Arn"] }
    Export:
      Name: !Sub "${EnvironmentName}-NodeGroup-${NameSpace}-NodeInstanceProfileArn"

  NodeInstanceRoleArn:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn
    Export:
      Name: !Sub "${EnvironmentName}-NodeGroup-${NameSpace}-NodeInstanceRoleArn"

  NodeSecurityGroupId:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup
    Export:
      Name: !Sub "${EnvironmentName}-NodeGroup-${NameSpace}-NodeSecurityGroupId"

